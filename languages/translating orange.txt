Rules for coding

Instead of printing out a raw string, you should call function _ to translate it, e.g.
   self.tabs.insertTab(GeneralTab, _("General"))
instead of 
   self.tabs.insertTab(GeneralTab, _("General"))

The marked strings are found by pygettext, exported to a file (along with the
comment telling where the string appears). Translator will add a translation,
the file is compiled and function _ uses the compiled file to find 
translations in run-time.

If the same string appears in multiple places, it needs to be translated 
only once (even, more, it cannot be translated more than once!).

Strings can be easily marked later, when the widget is developped and tested.
You don't have to do it while programming, but please don't forget about it later.

The string may contain formatting characters, like

self.infoa.setText(_('Number of nodes: %i') % orngTree.countNodes(tree))

Translator will see a string "Number of nodes: %i" and will translate it
accordingly.

Note that in case of multiple formatting strings, the order of inserted
values is not necessarily equal in all languages. Instead of

foo.setText(_('There are %i instances with %i missing values') % (inst, missval))

you should write

foo.setText(_('There are %(inst)i instances with %(missval)i missing values') % vars())

so that translator gets to translate a string "There are %(inst)i instances
with %(missval)i missing values" and can change the word order if needed.
(By the way, this is also simpler for programming, isn't it?)

Try to use the same standard phrase everywhere. If one widget says "Apply", another
has "Apply Changes", the next one "Commit Changes"... this unnecessarily burdens
the translator, and also isn't very nice to see. Another nice example is
"Name to be used by other widgets to identify your Learner/Classifier." in OWCN2.py,
while in other widgets "learner" and "classifier" were written in lower-case,
making this two different messages.

Try to avoid constructs like "Besides in "+str(rule)+", there are other rules...".
This phrase cannot be translated impossible to translated.

Also avoid isolated words like "by", which may have different meaning in different
contexts and thus have different translations. That is, don't write
  setText(str(i) + _(" by ") + str(j) + _(" equals ") + str(i/j))
since the translation of "by" wouldn't be the same as in
  setText("The room was " + str(i) + " by " + str(j) + " metres")

We don't translate error messages (yet?). We will never translate signal names
(like Classified Examples); we will always have some new, untranslated widgets
which would be incompatible with the translated ones if the signals were
translated. Translation of signals can be done in canvas, at the print-out.

Do not translate widget names (that is, the internal names which Qt uses) since they
cannot be unicode.

Never tie the text that user sees to variable names or to arguments. For instance,
if the classification tree induction algorithm accepts string arguments like
"information gain", "gain ratio" and "gini", you should not put these strings
in a combo box and pass the value that the user selects directly into the algorithm.

The was a combo box "Middle labels" with options "Off", "Correlations", "VizRank".
"Off" cannot be translated, since it may mean something else in another context. I
changed, this one, for instance, to "No labels".

Translation

It is very advisable to check the context of the message, especially for shorter
messages.

If the original messages ends (begins) with a space, so must the translation.

I would remind anybody translating to Slovenian language, that Slovenian titles
are written so that only the first letter is in uppercase, e.g. "Ciljni razred"
and not "Ciljni Razred".


Technical notes

Install the GNU gettext utility. Besides that, you will need pygettext.py which
can usually be found in Python's directory Tools/i18n.

To extract the marked strings from all *.py files in the current directory, type
   c:\Python23\Tools\i18n\pygettext.py *.py
The path to python can be different, of course. The messages will be put in
messages.pot. You can specify another filename by -d <name> before *.py.

Copy the .pot file into, say, slovenian.po and translate the messages. Save
the file as UTF-8, NO BOM.

Newly extracted messages are added to the existing messages by msgcat (add the
new file to the big .pot file with untranslated messages). If it complains about
the current charset CHARSET, manually edit the .po or .pot file and change
CHARSET to ASCII.

After that, the untranslated messages need to be added to the .po files with
translations. For this, use msgmerge - something like that

"c:\Program Files\gettext\bin\msgmerge.exe" -U slovenian3.po messages.pot

Here, messages.po2 are the old
messages, messages.pot are the newly extracted and orange.pot is the merged file
containing the translations of the old message and placeholders for the new.

