<html>

<head>
<title>obiGsea: Gene Set Enrichment Analysis</title>
<link rel=stylesheet href="../style.css" type="text/css">
<link rel=stylesheet href="style-print.css" type="text/css" media=print>
</head>

<body>
<h1>obiGsea: Gene Set Enrichment Analysis</h1>
<index name="modules/gene set enrichment analysis">

<p>Gene Set Enrichment Analysis (GSEA) is a method which tries to identify groups of genes that are
regulated together. It is implemented in module obiGsea, which is included in Orange for Functional Genomics package.
To use obiGsea you need to install Orange for Functional Genomics.</p>

<h2>GSEA</h2>
<index name="gsea">
<index name="GSEA">
<index name="gene+set">

<p>GSEA takes gene
expression data for multiple samples with their phenotypes and computes
gene set enrichment for given gene sets. To use it run
<code>runGSEA</code> method with the following arguments:

<p class=section>Arguments</p>
<dl class=arguments>

  <dt>data</dt>
  <dd>An <A href="ExampleTable.htm"><CODE>ExampleTable</CODE></A> with gene expression data. An example
  should correspond to a sample with its phenotype (class value). Attributes represent individual genes. Their names 
  should be meaningful gene aliases.</dd>

  <dt>classValues</dt>
  <dd>A pair of class values describing phenotypes that are chosen as two distinct phenotypes on which gene correlations
  are computed. Only examples with one of chosen class values are considered for analysis. If not specified, first
  two class values in <code>classVar</code> attribute descriptor are used.</dd>

  <dt>organism</dt>
  <dd>Organism code as used in KEGG. Needed for matching gene names in data to those in gene sets. Some
  examples: <code>hsa</code> for human, <code>mmu</code> for mouse. Default: <code>hsa</code>.</dd> 

  <dt>geneSets</dt>
  <dd>A python dictionary of gene sets, where key is a gene set name which points to a list of gene aliases for genes
  in the gene set. Default: gene sets from MSIGDB.</dd>

  <dt>n</dt>
  <dd>GSEA computes gene set significance by permutation tests. This parameter specifies the number
  of permutations. Default: 100.</dd>

  <dt>permutation</dt>
  <dd>Type of permutation. If <code>"class"</code>, class values (phenotypes) are permuted. This is the default. 
  However, if number of samples is small (less than 10), it is advisable to use <code>"gene"</code> permutations even
  though they ignore gene-gene interactions.</dd>

  <dt>minSize, maxSize</dt>
  <dd>Minimum and maximum number of genes from gene set also present in the data set for that gene set to be analysed.
  Defaults: 3 and 1000.</dd>

  <dt>minPart</dt>
  <dd>Minimum fraction of genes from the gene set also present in the data set for that gene set to be analysed. Default: 0.1.</dd> 

</dl>

<!-- es, nes, pval, fdr, os, ts, genes -->

Method <code>runGSEA</code> returns a dictionary where key is a gene set label and its value a list
of:
<ul>
<li> enrichment score,
<li> normalised enrichment score,
<li> P-value,
<li> FDR,
<li> whole gene set size,
<li> matched genes from the gene set,
<li> gene aliases for matched genes from the gene set.
</ul>

<p>A note on gene name matching. Gene name matching is performed with the help of KEGG database. 
A gene from a gene set is tried to be matched with a gene from the data set. If an alias for a gene from the
gene set is the same as an alias for a gene in the data set, then those aliases are matched. If not,
it is checked if gene alias from the gene set and gene alias from the data set are both gene
aliases of the same gene according to KEGG database for a given organism. If they are, we have a match.</p>

<h3>Example</h3>

<p>We present a simple usage examples. Data used here are not gene expression
data. For the method to work we had to specify our one sets of attributes that seem to "belong together".</p>

<p class="header"><a href="gsea1.py">gsea1.py</a> (uses <a href=
"iris.tab">iris.tab</a>)</p>

<xmp class=code>import orange, obiGsea

data = orange.ExampleTable("iris")

gen1 = dict([
    ("sepal",["sepal length", "sepal width"]),
    ("petal",["petal length", "petal width", "petal color"])
    ])

res = obiGsea.runGSEA(data, minSize=2, geneSets=gen1)
print "%5s  %6s %6s %s" % ("LABEL", "NES", "P-VAL", "GENES")
for name,resu in res.items():
    print "%5s  %6.3f %6.3f %s" % (name, resu[1], resu[2], str(resu[6]))

</xmp>

<p>Corresponding output:</p>

<xmp class=code>LABEL     NES  P-VAL GENES
petal  -1.125  0.732 ['petal length', 'petal width']
sepal   1.080  0.623 ['sepal length', 'sepal width']
</xmp>

<p>We can see that a "gene" labelled "petal color" was not used, because it couldn't be matched to any attribute in the data set.</p>

<HR>
<H2>References</H2>

<P>Subramanian, Aravind   and Tamayo, Pablo   and Mootha, Vamsi  K.  and Mukherjee, Sayan   and Ebert, Benjamin  L.  and Gillette, Michael  A.  and Paulovich, Amanda   and Pomeroy, Scott  L.  and Golub, Todd  R.  and Lander, Eric  S.  and Mesirov, Jill  P. Gene set enrichment analysis: A knowledge-based approach for interpreting genome-wide expression profiles. PNAS, 2005.</P>

</body>
</html>

