<html>
<HEAD>
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<LINK REL=StyleSheet HREF="../style-print.css" TYPE="text/css" MEDIA=print></LINK>
</HEAD>

<BODY>
<h1>orngNetwork</h1>

<index name="modules+network">

<p>The orngNetwork module provides the functionality to perform network 
analises and layout optimization.</p>

<h2>NetworkOptimization</h2>

<p><INDEX name="classes/NetworkOptimization (in orngNetwork)">NetworkOptimization  
is the main class for performing network layout optimization. Network structure is defined in orangeom.Network class that is inherited from <a href='../reference/graph.htm'>orange.Graph</a>. Coordinates for all vertices are stored in variable <code>coors</coors> and are initialized to random positions. You can modify coordinates manually or use one of the optimization algorithms.</p>

<p class=section>Attributes</p>
<DL class =attributes>
<DT>graph</DT>
<DD>Holds the Network object.</DD>
<DT>coors</DT>
<DD>Holds coordinates. Usage: <code>coors[0][i]</code>, <code>coors[1][i]</code>; 0 for x-axis, 1 for y-axis.</DD>
</DL>
<P class=section>Methods</P>
<DL class=attributes>
<DT>NetworkOptimization()</DT>
<DD>Default constrctor.</DD>
<DT>NetworkOptimization(network)</DT>
<DD>Constructor that takes the Network object.</DD>
<DT>readNetwork(file)</DT>
<DD>Reads network from Pajek (.net) file and adds graph structure to NetworkOptimization object. Returns Network object.</DD>
<DT>saveNetwork(file)</DT>
<DD>Saves network structure of NetworkOptimization object to Pajek (.net) file.</DD>
<DT>random()</DT>
<DD>Random layout optimization.</DD>
<DT>fruchtermanReingold(steps, temperature, hidden_nodes=[])</DT>
<DD>Fruchterman-Reingold spring layout optimization. Set number of iterations with argument <code>steps</code>, start temperature with <code>temperature</code> (for example: 1000) and set list of hidden nodes with argument <code>hidden_nodes</code>.</DD>
<DT>radialFruchtermanReingold(center, steps, temperature)</DT>
<DD>Radial Fruchterman-Reingold spring layout optimization. Set center node with attribute <code>center</code>, number of iterations with argument <code>steps</code> and start temperature with <code>temperature</code> (for example: 1000).</DD>
<DT>circularOriginal()</DT>
<DD>Circular layout optimization based on original order.</DD>
<DT>circularRandom()</DT>
<DD>Circular layout optimization based on random order.</DD>
<DT>circularCrossingReduction()</DT>
<DD>Circular layout optimization (Michael Baur, Ulrik Brandes) with crossing reduction.</DD>
</DL>

<h2>Examples</h2>

<h3>NetworkOptimization constructor and random layout</h3>

<p>In our first example we create a NetworkOptimization object with a simple full graph (K5). Vertices are initially played randomly. Graph is visualized using pylabs matplotlib.</p>

<p class="header"><a href="network_constructor.py">network_constructor.py</a></p>
<xmp class=code>import orangeom
from orngNetwork import NetworkOptimization
from pylab import *

# create graph object of type Network
graph = orangeom.Network(5, 0)

# set edges
for i in range(4):
    for j in range(i + 1, 5):
        graph[i,j] = 1

# vertices are placed randomly in NetworkOptimization constructor
network = NetworkOptimization(graph)

# read all edges and plot a line
for u, v in graph.getEdges():
    x1, y1 = network.coors[0][u], network.coors[1][u]
    x2, y2 = network.coors[0][v], network.coors[1][v]
    plot([x1, x2], [y1, y2], 'b-') 
               
# read x and y coordinates to Python list
x = [coordinate[0] for coordinate in network.coors]
y = [coordinate[1] for coordinate in network.coors]

# plot vertices
plot(x, y, 'ro')
show()
</xmp>
<p>Executing the above script pops-up a pylab window with the
following graph drawing:</p>
<img src="network_K5_random.png">
<h3>Network layout optimization</h3>

<p>This example demonstrates how to optimize network layout using one of included algorithms.</p>

<p class="header">part of <a href="network_optimization.py">network_optimization.py</a></p>
<xmp class=code># vertices are placed randomly in NetworkOptimization constructor
network = NetworkOptimization(graph)

# optimize verices layout with one of included algorithms
network.fruchtermanReingold(100, 1000)
</xmp>
<p>You can use one of the following optimization algorithms:</p>
<p>
<ul>
<li>.random()</li>
<li>.fruchtermanReingold(steps, temperature, hidden_nodes=[])</li>
<li>.radialFruchtermanReingold(center, steps, temperature)</li>
<li>.circularOriginal()</li>
<li>.circularRandom()</li>
<li>.circularCrossingReduction()</li>
</ul>
</p>
<p>Spring forces layout optimization is the result of the above script:</p>
<img src="network_K5_fr.png">
<h3>Reading and saving a network</h3>

<p>This example demonstrates reading a network. NetworkOptimization class can read or write Pajek (.net) file format.</p>

<p class="header"><a href="network_read.py">network_read.py</a> (uses <a href="K5.net">K5.net</a>)</p>

<xmp class=code># vertices are placed randomly in NetworkOptimization constructor
network = NetworkOptimization()

# read network from file
network.readNetwork("K5.net")
</xmp>

<p>You can save network in the same way with method <code>saveNetwork(fn)</code>.</p>
