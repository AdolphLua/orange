<html>
<HEAD>
<LINK REL=StyleSheet HREF="style.css" TYPE="text/css" MEDIA=screen>
</HEAD>
<body>

<p class="links">
Prev: <a href="regression.htm">Regression</a>,
Next: <a href="other.htm">Other Techniques for Orange Scripting</a>,
Up: <a href="default.htm">On Tutorial 'Orange for Beginners'</a>
<br><br><hr></p>


<H1>Association Rules</H1>

<br>

<p>Association rules are fun to do in Orange. One reason for this is Python, and particular implementation that allows a list of association rules to behave just like any list in Python. That is, you can select parts of the list, you can remove rules, even add them (yes, append() works on Orange association rules!).</p>

<p>But let's start with the basics. For association rules, Orange
straightforwardly implements APRIORI algorithm
(see Agrawal et al., Fast discovery of association rules, a
chapter in Advances in knowledge discovery and data mining, 1996),
Orange includes an optimized version of the algorithm that works on tabular data).
For number of reasons (but mostly for convenience) association rules should be
constructed and managed through the interface provided by <a href="../modules/orngAssoc.htm">orngAssoc module</a>.
As implemented in Orange, association rules construction procedure does not handle continuous attributes,
so make sure that your data is categorized. Also, class variables are treated just like attributes.
For examples in this tutorial, we will use data from the data set
<a href="imports-85.tab">imports-85.tab</a>, which surveys
different types of cars and lists their characteristics. We will use
only first ten attributes from this data set and categorize them so
three equally populated intervals will be created for each continuous variable.
This will be done through the following part of the code:</p>

<XMP class=code>
data = orange.ExampleTable("imports-85")
data = orange.Preprocessor_discretize(data, \
  method=orange.EquiNDiscretization(numberOfIntervals=3))
data = data.select(range(10))
</XMP>

<p>Now, to our examples. First one uses the data set constructed with above script and shows how to build a list of association rules which will have support of at least 0.4. Next, we select a subset of first five rules, print them out, delete first three rules and repeat the printout. The script that does this is:</p>

<p class="header">part of <a href="assoc1.py">assoc1.py</a>  (uses <a href=
"imports-85.tab">imports-85.tab</a>) </p>
<xmp class=code>
minSupport = 0.4
rules = orngAssoc.build(data, minSupport)

print "%i rules with support higher than or equal to %5.3f found." % (len(rules), minSupport)

subset = rules[0:5]
subset.printMeasures(['support','confidence'])

print
del subset[0:2]
subset.printMeasures(['support','confidence'])
</xmp>

The output of this script is:

<xmp class="code">
87 rules with support higher than or equal to 0.400 found.

supp	conf 	rule
0.888	0.984 	engine-location=front -> fuel-type=gas
0.888	0.901 	fuel-type=gas -> engine-location=front
0.805	0.982 	engine-location=front -> aspiration=std
0.805	0.817 	aspiration=std -> engine-location=front
0.785	0.958 	fuel-type=gas -> aspiration=std

supp	conf 	rule
0.805	0.982 	engine-location=front -> aspiration=std
0.805	0.817 	aspiration=std -> engine-location=front
0.785	0.958 	fuel-type=gas -> aspiration=std
</xmp>

<p>Notice that the when printing out the rules, user can specify which rule evaluation measures are to be printed. Choose anything from <code>['support', 'confidence', 'lift', 'leverage', 'strength', 'coverage']</code>.</p>

<p>The second example uses the same data set, but first prints out five most confident rules. Then, it shows a rather advanced type of filtering: every rule has parameters that record its support, confidence, etc... These may be used when constructing your own filter functions. The one in our example uses <code>support</code> and <code>lift</code>. [If you have just started with Python: lambda is a compact way to specify a simple function without using def statement. As a function, it uses its own name space, so minimal lift and support requested in our example should be passed as function arguments]. Here goes the code:</p>

<p class="header">part of <a href="assoc2.py">assoc2.py</a>  (uses <a href=
"imports-85.tab">imports-85.tab</a>) </p>
<xmp class=code>
minSupport = 0.4
rules = orngAssoc.build(data, minSupport)

n = 5
print "%i most confident rules:" % (n)
rules.sortByConfidence()
rules[0:n].printMeasures(['confidence','support','lift'])

supp = 0.8; lift = 1.1
print "\nRules with support>%5.3f and lift>%5.3f" % (supp, lift)
rulesC=rules.filter(lambda x,supp=supp,lift=lift: x.support>supp and x.lift>lift)
rulesC.sortByFields(['confidence'])
rulesC.printMeasures(['confidence','support','lift'])
</xmp>

<p>Just two rules with requested support and lift are found in our rule set:</p>

<xmp class="code">
5 most confident rules:
conf	supp	lift 	rule
1.000	0.556	1.015 	engine-location=front -> num-of-doors=four
1.000	0.585	1.015 	engine-location=front -> drive-wheels=fwd
0.984	0.888	1.015 	engine-location=front -> fuel-type=gas
0.982	0.805	1.015 	engine-location=front -> aspiration=std
0.958	0.785	1.108 	fuel-type=gas -> aspiration=std

Rules with support>0.800 and lift>1.100
conf	supp	lift 	rule
0.901	0.888	1.108 	fuel-type=gas -> engine-location=front
0.817	0.805	1.220 	aspiration=std -> engine-location=front
</xmp>

<p>Finally, for our third example, we introduce cloning. Cloning helps if you require to work with different rule subsets that stem from common rule set created from some data (actually, cloning is quite useless in our example, but may be very useful otherwise). So, we use cloning to make a copy of the set of rules, then sort by first support and then confidence, and then print out few best rules. We have also lower required minimal support, just to see how many rules we obtain in this way.</p>

<p class="header">part of <a href="assoc3.py">assoc3.py</a>  (uses <a href=
"imports-85.tab">imports-85.tab</a>) </p>
<xmp class=code>
minSupport = 0.2
rules = orngAssoc.build(data, minSupport)
print "%i rules with support higher than or equal to %5.3f found.\n" % (len(rules), minSupport)

rules2 = rules.clone()
rules2.sortByConfidence()

n = 5
print "Best %i rules:" % n
subset = rules[:n]
subset.printMeasures(['support','confidence'])
</xmp>

<p>The output of this script is:</p>

<xmp class="code">
828 rules with support higher than or equal to 0.200 found.

Best 5 rules:
supp	conf 	rule
0.888	0.984 	engine-location=front -> fuel-type=gas
0.888	0.901 	fuel-type=gas -> engine-location=front
0.805	0.982 	engine-location=front -> aspiration=std
0.805	0.817 	aspiration=std -> engine-location=front
0.785	0.958 	fuel-type=gas -> aspiration=std
</xmp>

<p class="links"><hr><br>Prev: <a href="regression.htm">Regression</a>, 
Next: <a href="other.htm">Other Techniques for Orange Scripting</a>, 
Up: <a href="default.htm">On Tutorial 'Orange for Beginners'</a></p>

</body></html>

